Basic Buliding blocks
--------------------------------

1- Modules- used to add 3rd party libraries
2- Componenets- to create html pages(html,css,ts)
3- Selector - used to select the components
4- Services - used to share data between components
5-Dependency-Injection - data share between two dependent classes
6- Data Binding-

**********************************CMS Steps*********************

1. Create Angular project - ng new contact_app
2. cd contact_app
3. code .
4. Project Run - ng serve --open
5. Install Bootstrap,font-awesome, google fonts
        1) Bootstrap install- npm i bootstrap
        2) fontawesome - npm i @fortawesome/fontawesome-free
        3) configaration - to avoid site down problems
                1-go to package.json and see if bootstrap is ther .if so it is present in node as well
6. Create Components
        1) Contact Manager - It will display all contact and manage them - command to create contact manager component is - ng g c contactManager
        2) Add Contact - ng g c addContact
        3) Update Contact - ng g c updateContact
        4) View Contact - ng g c viewContact

7. Routing -Setup path for each component that we need to display in the web page.
app-routing.module.ts(file name) ,Routes[]
        1)  http://localhost:4200/contact-manager (/admin)

        Routes[
                {
                        path:'',redirectTo:'contact/admin',pathMatch:'full'
                        //http://localhost:4200
                },
                {
                        path:'contact/admin',component:contactManagerComponent
                },
                
        ]

       2)  use <router-outlet></router-outlet> selector inside the app.component.html page to view the requested component-
        <router-outlet></router-outlet>

        3) now add path for add Contact
         Routes[
                //local host
                {
                        path:'',redirectTo:'contact/admin',pathMatch:'full'
                        //http://localhost:4200
                },
                //contact manager
                {
                        path:'contact/admin',component:contactManagerComponent
                },
                //add contact
                {
                        path:'contact/add',component:addComponent
                },
        ]
        
        
        
        
8. Create Page not found component -ng g c pageNotFound
        {
        path: "**", component:pageNotFoundComponent
        }


9. Create component for navbar and footer
        ng g c navbar
        ng g c footer


10. Complete design of front-end Components

11. API Creation
        open jsonplaceholder site -> my json server

12. Server API Creation
        1) Create a folser inside src folderof the project folder ->server folder
        2) Create a db.json file in that server folder
        3) add data into db.json file
        4) Backend setting up
                a)Create a package (package.json) for server - npm init
                b)For running db.json - npm i json-server
                c)run - npm start
                error -> in package.json
                "scripts": {"start": "json-server --watch db.json --port 3000"}
                d) again type -> npm start (no errors will be shown)


13 Create a model for Contact and group
        -Create model folder in src folder
        -create myContact.ts file in model folder
        -create myGroup.ts file in model folder

14. Data fetching
        JS-Data Fetching -> promise -> .then()  and  catch()
        Ts- data Fetching -> observable -> .subscribe() and catch()  ->rxjs(To resolve asynchronous action)

15. Create Service - ng g s service_name
        services- Reusable code that can be shared between components
        ng g s service/api

16. To get http methods - get, put,post, delete
        1)import httpClientModule in app.module.ts

17. Dependency-Injection - data share between two dependent classes
        perform inside the constructor
        -syntax - access specifier variable_name: class_name

18. Dependency-Injection in api services
        private http:HttpClient


19. Data Binding - Data sharing inside a component
        1) One-way Data Binding - data passes through one direction 
                                Component -> ts and View -> html
                                        html ->ts or ts ->html
                a)Component to View (ts->html)
                        i)string interpollation{{variable_name}}
                        ii)Property Binding -[attribute_name]="property_name"
                b)View to Component (html -> ts)
                        i)Event Binding - (event)= "function_name()"
                                Note: Js- onclick
                                      ts- (click)
                        ii)Event Binding using $event (dollar event) - 
                                (event)=function_name($event)

        2) Two-way Data Binding - data passes in two direction
                                        html -> ts / view to component
                                        ts -> html / component to view


20. Directives - To manipulate html DOM
        1) Component Directives
        2) Structural Directives
                i)*ngIf="condition"
                ii)*ngFor="let var_name of array_name

21. Activated Route - It provides access to information about a route associated with a component that is loaded in an outlet
        parameters-
                -url
                -params

22.Understanding Pipes- 
        Use pipes to transform strings, currency amounts, dates, and other data for display.
        DatePipe: Formats a date value according to locale rules.
        Searching-using pipes
                creating pipes :- ng g p pipefolder/pipe_name
                                  ng g p pipes/filter

        PipeTransform - INTERFACE/CLASS
                An interface that is implemented by pipes in order to perform a transformation. Angular invokes the transform method with the value of a binding as the first argument, and any parameters as the second argument in list form.
         transform(value: any, ...args: any[]): any{

         }
         parameters for Searching
                1)allContacts -array (array of contact details)
                2)searchkey-to enter a search value
                3)propName- the value to be based on a content 

23. Event Binding-for searching. => 
        go to data binding -> Component to view - String interpollation and property binding 
                              view to component - go to point number 19

24.Add Contact- Two-Way Data Binding
                        ngModel - import formModules in appModules
                                [(ngModel)]="property_name"